class Satellite:
    def __init__(self, satellite_id):
        self.satellite_id = satellite_id
        self.content_categories = ['I', 'II', 'III']  # Content categories generated by the satellite
        self.content_size = {'I':10, 'II': 1, 'III': 0.01, 'IV': 2}  # sizes of content as per category I:HDF, II:images , III:Sensory data, IV: Videos
        self.counter = 0
        self.generated_cache = {
            'I': [],
            'II': [],
            'III': [],  # Add more categories if needed
        }  # Cache to store content received from satellites and other UAVs
        self.transmission_rate = 1  # Mbps

    def generate_content(self, current_time, no_of_content_each_category, ground_station):
        content_validity = 30 * 60  # 30 minutes in seconds
          # Default to 0 if category is not found
        # Generate content for connected satellites
        for category in self.content_categories:
            category_contents = []
            content_size = self.content_size.get(category, 0)
            num_contents = no_of_content_each_category # Adjust the range as needed
            for n in range(1, num_contents+1):
                    content = {
                        'content_type': Satellite,
                        'destination': None,
                        'generation_time': current_time,
                        'hop_count': 0,
                        'content_coord': self.satellite_id,
                        'content_category': category,
                        'content_no': n,
                        'generation_time': current_time,
                        'content_validity': content_validity,
                        'content_receive_time': 0,
                        'size': content_size, # Include the content size based on category
                        'content_hit': 0,
                    }
                    category_contents.append(content)

            self.generated_cache[category] = category_contents
            # Add the generated content to the GroundStation's content_cache for this category
            ground_station.add_to_cache(self.satellite_id, category, category_contents)

    def print_cache(self):
        print("Generated Cache for Satellite", self.satellite_id)
        for category, contents in self.generated_cache.items():
            print(f"Category: {category}", end=' ')
            for content in contents:
                print(f"Content Number: {content['content_no']}", end=' ')
            print()  # Print a new line after each category



    def cache_clean(self, current_time):
        for category in self.content_categories:
            cached_content = self.generated_cache[category]
            # Filter out content that has expired
           # for content in cached_content:
                #if current_time >= content['generation_time'] + content['content_validity']:
                    #print(f"Expired Content - Generation Time: {content['generation_time']}, Current Time: {current_time}", end=' ')
            self.generated_cache[category] = [content for content in cached_content if
                                              current_time < content['generation_time'] + content['content_validity']]

    def run(self, satellites, communication,  communication_schedule, current_time, slot, no_of_content_each_category, ground_station):
        #print(slot, current_time, self.satellite_id)
        satellite_list = communication.get_connected_satellites(slot, communication_schedule, satellites)
        for satellite in satellite_list:
            #print(satellite.satellite_id)
            if satellite.satellite_id == self.satellite_id:
               self.generate_content(current_time, no_of_content_each_category, ground_station)
              # self.print_cache()
        self.cache_clean(current_time)
        #self.print_cache()
